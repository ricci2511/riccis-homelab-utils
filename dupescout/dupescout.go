package dupescout

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"path/filepath"
	"runtime"
	"syscall"

	"github.com/puzpuzpuz/xsync/v2"
	"golang.org/x/sync/errgroup"
)

type pair struct {
	key  string // depends on the KeyGeneratorFunc
	path string
}

// Dupescout is the main struct that holds the state of the search.
type dupescout struct {
	g        *errgroup.Group
	pairs    chan *pair
	result   chan []string
	shutdown chan os.Signal
}

func newDupeScout(workers int) *dupescout {
	g := new(errgroup.Group)
	g.SetLimit(workers)

	return &dupescout{
		g:        g,
		pairs:    make(chan *pair, 500),
		result:   make(chan []string, 1),
		shutdown: make(chan os.Signal, 1),
	}
}

// Starts the search for duplicates which can be customized by the provided Cfg struct.
//
// Will block until the search is done.
func Find(c Cfg) ([]string, error) {
	c.defaults()
	dup := newDupeScout(c.Workers)

	go dup.consumePairs()             // pair consumer goroutine
	go gracefulShutdown(dup.shutdown) // graceful shutdown goroutine

	dup.g.Go(func() error {
		return dup.search(c.Path, &c)
	})

	err := dup.g.Wait()

	// Signal that no more pairs will be sent, triggering the consumer to process the results.
	close(dup.pairs)

	return <-dup.result, err
}

// Consumes pairs received from the pairs channel and processes
// them into the result channel once no more pairs are sent.
func (dup *dupescout) consumePairs() {
	defer close(dup.result)

	m := xsync.NewMapOf[[]string]()
	for p := range dup.pairs {
		paths, ok := m.Load(p.key)
		if ok {
			m.Store(p.key, append(paths, p.path))
		} else {
			m.Store(p.key, []string{p.path})
		}
	}

	dup.result <- processResults(m)
}

// Produces a pair with the key which is generated by the KeyGeneratorFunc and the path
// which is then sent to the pairs channel.
func (dup *dupescout) producePair(path string, keyGen KeyGeneratorFunc) error {
	// Stop pair production if a shutdown signal has been received.
	if dup.shuttingDown() {
		return nil
	}

	key, err := keyGen(path)
	if err != nil {
		return err
	}

	if key == "" {
		return fmt.Errorf("key generator returned an empty key for path: %s", path)
	}

	fmt.Println(runtime.NumGoroutine())

	dup.pairs <- &pair{key, path}
	return nil
}

// Walks the tree of the provided dir and triggers the production of pairs for each valid file.
func (dup *dupescout) search(dir string, c *Cfg) error {
	return filepath.WalkDir(dir, func(path string, de os.DirEntry, err error) error {
		// Stop searching if a shutdown signal has been received.
		if dup.shuttingDown() {
			return nil
		}

		if err != nil {
			return err
		}

		if de.IsDir() && c.skipDir(path) {
			return filepath.SkipDir
		}

		if de.Type().IsRegular() && !c.skipFile(path) {
			fi, err := de.Info()
			if err != nil || fi.Size() == 0 {
				return nil
			}

			dup.g.Go(func() error {
				return dup.producePair(path, c.KeyGenerator)
			})
		}

		return nil
	})
}

// Processes a map of keys to paths and returns a slice of paths that are duplicates.
func processResults(m *xsync.MapOf[string, []string]) []string {
	res := []string{}

	m.Range(func(key string, paths []string) bool {
		if len(paths) > 1 {
			res = append(res, paths...)
		}

		return true
	})

	return res
}

// Helper to check if a shutdown signal has been received.
func (dup *dupescout) shuttingDown() bool {
	select {
	case <-dup.shutdown:
		return true
	default:
		return false
	}
}

// Sets up a signal handler worker for graceful shutdown.
func gracefulShutdown(shutdown chan os.Signal) {
	signal.Notify(shutdown, syscall.SIGINT, syscall.SIGTERM)
	<-shutdown
	log.Println("\nReceived signal, shutting down after current workers are done...")
	close(shutdown)
}
